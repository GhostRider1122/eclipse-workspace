package ebill_project;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class Main {
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws ClassNotFoundException, SQLException {
    	Conn.connect();
    	//Creates the customer table
        createCustomerTable();
        
        //Creates the bills tables
        createBillTable();
        
        //Creates the complaints table
        createComplaintTable();
    	
        System.out.println("Connected to the database successfully!");
        System.out.println("----------------------------------------------------------------------------");
    	
        boolean exit = false;
        while (!exit) {
            System.out.println("Choose an option:");
            System.out.println("1- Manage Customers");
            System.out.println("2- Manage Bills");
            System.out.println("3- Manage Complaints");
            System.out.println("4- Search Consumer Details by ID");
            System.out.println("5- Search Unpaid Bills by Consumer ID");
            System.out.println("6- View Complaints by Consumer ID");
            System.out.println("7- Exit");

            int choice = scanner.nextInt();
            switch (choice) {
	            case 1:
	                Customers.manageCustomers();
	                break;
	            case 2:
	                Bills.manageBills();
	                break;
	            case 3:
	                Complaints.manageComplaints();
	                break;
	            case 4:
	                searchCustomerById();
	                break;
	            case 5:
	                searchUnpaidBillsByConsumerId();
	                break;
	            case 6:
	                viewComplaintsByConsumerId();
	                break;
	            case 7:
	                exit = true;
	                Conn.disconnect();
	                System.out.println("Exiting the console .....");
	                break;
	            default:
	                System.out.println("Invalid choice. Please try again.");
        
            }
        }
    }

    


    // Search and Display Methods
    static void searchCustomerById() {
    	try {
    		System.out.println("Enter Consumer ID to search:");
            int consumerId = scanner.nextInt();
            
            String sql = "SELECT * FROM customers WHERE customer_id = ?";
            try (PreparedStatement pstmt = Conn.connection.prepareStatement(sql)) {
                pstmt.setInt(1, consumerId);
                ResultSet rs = pstmt.executeQuery();
                
                boolean found = false;
                System.out.println("Customer Details:");
                while (rs.next()) {
                	found = true;
                    System.out.println("ID: " + rs.getInt("customer_id") +
                            ", Name: " + rs.getString("title") + " "+ rs.getString("customer_name") +
                            ", Email: " + rs.getString("email") +
                            ", Mobile: " + rs.getString("mobile_number"));
                }
                
                if(!found) System.out.println("No customer found matching the given id");
            }
    	} catch (SQLException e) {
            System.out.println("Error deleting Complaint: " + e.getMessage());
        }
        
        
    }

    static void searchUnpaidBillsByConsumerId() {
    	try {
    		System.out.println("Enter Consumer ID to search unpaid bills:");
            int consumerId = scanner.nextInt();
            
            String sql = """
            			SELECT 
            		 		c.customer_id, 
						    c.customer_name, 
						    b.due_amount, 
						    b.payable_amount
						FROM 
						    customers c
						INNER JOIN 
						    bills b 
						ON 
						    c.customer_id = b.customer_id
						WHERE 
						    c.customer_id = ? AND b.due_amount > 0;
            		""";
            
            try (PreparedStatement pstmt = Conn.connection.prepareStatement(sql)) {
                pstmt.setInt(1, consumerId);
                ResultSet rs = pstmt.executeQuery();
                
                boolean found = false;
                System.out.println("Details of customers with unpaid bills:");
                while (rs.next()) {
                	found = true;
                    System.out.println("ID: " + rs.getInt("customer_id") +
                            ", Name: " +  rs.getString("customer_name") +
                            ", Due Amount: " + rs.getDouble("due_amount") +
                            ", Payable Amount: " + rs.getDouble("payable_amount"));
                }
                
                if(!found) System.out.println("No unpaid bills found matching the given id");
            }
    	}  catch (SQLException e) {
            System.out.println("Error getting customer details: " + e.getMessage());
        }
        
    }

    static void viewComplaintsByConsumerId() {
    	try {
	        System.out.println("Enter Consumer ID to view complaints:");
	        int consumerId = scanner.nextInt();
	        
	        String sql = "SELECT * FROM complaints WHERE consumerId = ?";
	        
	        try (PreparedStatement pstmt = Conn.connection.prepareStatement(sql)) {
	            pstmt.setInt(1, consumerId);
	            ResultSet rs = pstmt.executeQuery();
	            
	            System.out.println("Details of complaints for the given customer:");
	            while (rs.next()) {
	                System.out.println("ID: " + rs.getInt("consumerId") +
	                        ", Name: " +  rs.getString("customerName") +
	                        ", Complaint Type: " + rs.getString("complaintType") +
	                        ", Category: " + rs.getString("category") + 
	                 		", Mobile Number: " + rs.getInt("mobile_number") +
	                 		", Problem Description: " + rs.getString("mobile_number"));
	                
	            }
	        }
	        
    	} catch (SQLException e) {
            System.out.println("Error getting complaint details: " + e.getMessage());
    	}

    }
    
    
    public static void createCustomerTable() throws SQLException {
    	String query="""
    			create table if not exists customers (
    			  customer_id BIGINT(13) PRIMARY KEY,
    			  bill_number INTEGER(5) NOT NULL,
    			  title VARCHAR(5) NOT NULL,
				  customer_name VARCHAR(50) NOT NULL,
				  email VARCHAR(100) NOT NULL UNIQUE,
				  mobile_number BIGINT(10) NOT NULL,
				  user_id VARCHAR(20) CHECK (LENGTH(user_id) BETWEEN 5 AND 20),
				  password VARCHAR(30) NOT NULL
    			);
    			""";
    	PreparedStatement ps=Conn.connection.prepareStatement(query);
    	ps.executeUpdate();
    }
    
    public static void createBillTable() throws SQLException {
    	String query="""
    			create table if not exists bills (
    			  customer_id BIGINT(13) PRIMARY KEY,
    			  due_amount DECIMAL NOT NULL,
    			  payable_amount DECIMAL NOT NULL,
    			  FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE
    			);
    			""";
    	PreparedStatement ps=Conn.connection.prepareStatement(query);
    	ps.executeUpdate();
    }
    
    public static void createComplaintTable() throws SQLException {
    	String query="""
    			create table if not exists complaints (
    			  complaintId INTEGER PRIMARY KEY, 
			      complaintType TEXT NOT NULL,
			      category TEXT NOT NULL,    
			      landMark TEXT,                              
			      customerName TEXT NOT NULL,                  
			      problem TEXT NOT NULL,                       
			      consumerId INTEGER NOT NULL, 
			      address TEXT NOT NULL,                       
			      mobileNumber TEXT NOT NULL,                  
			      CHECK(LENGTH(mobileNumber) = 10 AND mobileNumber GLOB '[0-9]*'),
			      FOREIGN KEY (consumerId) REFERENCES customers(customer_id) ON DELETE CASCADE
    			);
    			""";
    	PreparedStatement ps=Conn.connection.prepareStatement(query);
    	ps.executeUpdate();
    }
    
}
