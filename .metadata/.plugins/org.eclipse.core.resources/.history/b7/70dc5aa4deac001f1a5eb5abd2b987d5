package java_project;

import java.util.ArrayList;
import java.util.Scanner;

class Customer {
    int consumerId;
    int billNumber;
    String title;
    String customerName;
    String email;
    String mobileNumber;
    String userId;
    String password;
    String confirmPassword;

    public Customer(int consumerId, int billNumber, String title, String customerName, String email, 
                    String mobileNumber, String userId, String password, String confirmPassword) {
        this.consumerId = consumerId;
        this.billNumber = billNumber;
        this.title = title;
        this.customerName = customerName;
        this.email = email;
        this.mobileNumber = mobileNumber;
        this.userId = userId;
        this.password = password;
        this.confirmPassword = confirmPassword;
    }
}

class Bill {
    int consumerId;
    double dueAmount;
    double payableAmount;

    public Bill(int consumerId, double dueAmount, double payableAmount) {
        this.consumerId = consumerId;
        this.dueAmount = dueAmount;
        this.payableAmount = payableAmount;
    }
}

class Complaint {
    String complaintType;
    String category;
    String landmark;
    String customerName;
    String problem;
    int consumerId;
    String address;
    String mobileNumber;

    public Complaint(String complaintType, String category, String landmark, String customerName, 
                     String problem, int consumerId, String address, String mobileNumber) {
        this.complaintType = complaintType;
        this.category = category;
        this.landmark = landmark;
        this.customerName = customerName;
        this.problem = problem;
        this.consumerId = consumerId;
        this.address = address;
        this.mobileNumber = mobileNumber;
    }
}

public class Main {
    static Scanner scanner = new Scanner(System.in);
    static ArrayList<Customer> customers = new ArrayList<>();
    static ArrayList<Bill> bills = new ArrayList<>();
    static ArrayList<Complaint> complaints = new ArrayList<>();

    public static void main(String[] args) {
        boolean exit = false;
        while (!exit) {
            System.out.println("Choose an option:");
            System.out.println("1- Manage Customers");
            System.out.println("2- Manage Bills");
            System.out.println("3- Manage Complaints");
            System.out.println("4- Search Consumer Details by ID");
            System.out.println("5- Search Unpaid Bills by Consumer ID");
            System.out.println("6- View Complaints by Consumer ID");
            System.out.println("7- Exit");

            int choice = scanner.nextInt();
            switch (choice) {
	            case 1:
	                manageCustomers();
	                break;
	            case 2:
	                manageBills();
	                break;
	            case 3:
	                manageComplaints();
	                break;
	            case 4:
	                searchCustomerById();
	                break;
	            case 5:
	                searchUnpaidBillsByConsumerId();
	                break;
	            case 6:
	                viewComplaintsByConsumerId();
	                break;
	            case 7:
	                exit = true;
	                System.out.println("Exiting the console .....");
	                break;
	            default:
	                System.out.println("Invalid choice. Please try again.");
        
            }
        }
    }

    // Customer Management Methods
    static void manageCustomers() {
    	boolean exit = false;
        while (!exit) {
	        System.out.println("1- Add Customer");
	        System.out.println("2- Update Customer");
	        System.out.println("3- Delete Customer");
	        System.out.println("4- Display All Customers");
	        System.out.println("5- Exit");
	        int choice = scanner.nextInt();
	
	        switch (choice) {
	            case 1 -> addCustomer();
	            case 2 -> updateCustomer();
	            case 3 -> deleteCustomer();
	            case 4 -> displayAllCustomers();
	            case 5 -> exit=true;
	            default -> System.out.println("Invalid choice.");
	        }
        }
    }
    
    static void addCustomer() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();
        System.out.println("Enter Bill Number:");
        int billNumber = scanner.nextInt();
        scanner.nextLine(); // Clear the newline
        System.out.println("Enter Title:");
        String title = scanner.nextLine();
        System.out.println("Enter Customer Name:");
        String customerName = scanner.nextLine();
        System.out.println("Enter Email:");
        String email = scanner.nextLine();
        System.out.println("Enter Mobile Number:");
        String mobileNumber = scanner.nextLine();
        System.out.println("Enter User ID:");
        String userId = scanner.nextLine();
        System.out.println("Enter Password:");
        String password = scanner.nextLine();
        System.out.println("Enter Confirm Password:");
        String confirmPassword = scanner.nextLine();

        customers.add(new Customer(consumerId, billNumber, title, customerName, email, mobileNumber, userId, password, confirmPassword));
        System.out.println("Customer Registration is successful.");
    }

    static void updateCustomer() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();
        scanner.nextLine(); // Clear the newline
        System.out.println("Enter New Email:");
        String newEmail = scanner.nextLine();

        boolean found = false;
        for (Customer customer : customers) {
            if (customer.consumerId == consumerId) {
                customer.email = newEmail;
                System.out.println("Customer details are updated successfully.");
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("Customer not found.");
        }
    }

    static void deleteCustomer() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();

        customers.removeIf(customer -> customer.consumerId == consumerId);
        System.out.println("Customer details are deleted successfully.");
    }

    static void displayAllCustomers() {
        for (Customer customer : customers) {
            System.out.println("Consumer ID: " + customer.consumerId + ", Customer Name: " + customer.customerName +
                               ", Email: " + customer.email + ", Mobile: " + customer.mobileNumber);
        }
    }

    // Bill Management Methods
    static void manageBills() {
    	boolean exit = false;
        while (!exit) {
	        System.out.println("1- Add Bill");
	        System.out.println("2- Update Bill Amount");
	        System.out.println("3- Delete Bill");
	        System.out.println("4- Return to main menu");
	        int choice = scanner.nextInt();
	
	        switch (choice) {
	            case 1 -> addBill();
	            case 2 -> updateBill();
	            case 3 -> deleteBill();
	            case 4 -> exit=true;
	            default -> System.out.println("Invalid choice.");
	        }
        }
    }

    static void addBill() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();
        System.out.println("Enter Due Amount:");
        double dueAmount = scanner.nextDouble();
        System.out.println("Enter Payable Amount:");
        double payableAmount = scanner.nextDouble();

        bills.add(new Bill(consumerId, dueAmount, payableAmount));
        System.out.println("Bill details are added successfully.");
    }

    static void updateBill() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();
        System.out.println("Enter New Due Amount:");
        double newDueAmount = scanner.nextDouble();

        boolean found = false;
        for (Bill bill : bills) {
            if (bill.consumerId == consumerId) {
                bill.dueAmount = newDueAmount;
                System.out.println("Bill details are updated successfully.");
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("Bill not found.");
        }
    }

    static void deleteBill() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();

        bills.removeIf(bill -> bill.consumerId == consumerId);
        System.out.println("Bill details are deleted successfully.");
        
    }

    static void manageComplaints() {
    	boolean exit = false;
        while (!exit) {
	        System.out.println("1- Register Complaint");
	        System.out.println("2- Delete Complaint");
	        System.out.println("3- Return to main menu");
	        int choice = scanner.nextInt();
	
	        switch (choice) {
	            case 1 -> registerComplaint();
	            case 2 -> deleteComplaint();
	            case 3 -> exit=true;
	            default -> System.out.println("Invalid choice. ðŸ˜¢");
	        }
        }
    }

    static void registerComplaint() {
        scanner.nextLine(); // Clear the newline
        System.out.println("Enter Complaint Type:");
        String complaintType = scanner.nextLine();
        System.out.println("Enter Category:");
        String category = scanner.nextLine();
        System.out.println("Enter Landmark:");
        String landmark = scanner.nextLine();
        System.out.println("Enter Customer Name:");
        String customerName = scanner.nextLine();
        System.out.println("Enter Problem:");
        String problem = scanner.nextLine();
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();
        scanner.nextLine(); // Clear the newline
        System.out.println("Enter Address:");
        String address = scanner.nextLine();
        System.out.println("Enter Mobile Number:");
        String mobileNumber = scanner.nextLine();

        complaints.add(new Complaint(complaintType, category, landmark, customerName, problem, consumerId, address, mobileNumber));
        System.out.println("Successfully registered Complaint.");
    }

    static void deleteComplaint() {
        System.out.println("Enter Consumer ID:");
        int consumerId = scanner.nextInt();

        complaints.removeIf(complaint -> complaint.consumerId == consumerId);
        System.out.println("Complaint details are deleted successfully.");
    }

    // Search and Display Methods
    static void searchCustomerById() {
        System.out.println("Enter Consumer ID to search:");
        int consumerId = scanner.nextInt();

        boolean found = false;
        for (Customer customer : customers) {
            if (customer.consumerId == consumerId) {
                System.out.println("Consumer ID: " + customer.consumerId);
                System.out.println("Customer Name: " + customer.customerName);
                System.out.println("Mobile Number: " + customer.mobileNumber);
                System.out.println("Email: " + customer.email);
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("Customer with Consumer ID " + consumerId + " not found.");
        }
    }

    static void searchUnpaidBillsByConsumerId() {
        System.out.println("Enter Consumer ID to search unpaid bills:");
        int consumerId = scanner.nextInt();

        boolean found = false;
        for (Bill bill : bills) {
            if (bill.consumerId == consumerId && bill.dueAmount > 0) {
                System.out.println("Consumer ID: " + bill.consumerId);
                System.out.println("Due Amount: " + bill.dueAmount);
                System.out.println("Payable Amount: " + bill.payableAmount);
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("No unpaid bills found for Consumer ID " + consumerId + ".");
        }
    }

    static void viewComplaintsByConsumerId() {
        System.out.println("Enter Consumer ID to view complaints:");
        int consumerId = scanner.nextInt();

        boolean found = false;
        for (Complaint complaint : complaints) {
            if (complaint.consumerId == consumerId) {
                System.out.println("Consumer ID: " + complaint.consumerId);
                System.out.println("Customer Name: " + complaint.customerName);
                System.out.println("Complaint Type: " + complaint.complaintType);
                System.out.println("Category: " + complaint.category);
                System.out.println("Problem Description: " + complaint.problem);
                System.out.println("Mobile: " + complaint.mobileNumber);
                found = true;
            }
        }
        if (!found) {
            System.out.println("No complaints found for Consumer ID " + consumerId + ".");
        }
    }
}
